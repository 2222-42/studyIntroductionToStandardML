(* SML source file. Copyright (c) by 2222-42 2020.
* Chap 7.1
*)

(* 
複雑なデータ処理を行うプログラムを開発するために、
システム定義のデータ構造以外に
ユーザーによる新しいデータ構造を定義する機構が必要

MLではデータ構造の定義はデータ型の宣言を通じて行われる。
-> 2分木を例にして説明する
*)

(* 
木のノードが持つ情報の型をaとすると、2分木は以下のように再帰的に定義される。

1. 空の木は2分木である
2. a型のデータvと、2つの2分木T1, T2からなる組(v, T1, T2)は2分木である

つまり、2分木は以下のように再帰的に定義された集合
```
tree(a) = {Empty} \cup (a \times tree(a) \times tree(a))
```
の要素とみなせる。

型を、その型を持つデータの集合と考えると、上の等式は2分木の型の定義とみなすことができる。
*)

datatype 'a tree = Empty | Node of 'a * 'a tree * 'a tree

(*
'a tree は新しい多相型構成子
EmptyとNodeはデータ構成子
- Emptyのように引数を持たないデータ構成子は、定義されたデータ型をもつ定数として使用できる
- Nodeのように引数を持つデータ構成子は、その構成子の引数の型から、定義されたデータ型への関数と同様に使用できる
*)

Node ("a", Node("b", Empty, Empty),
           Node("c", Node("d", Empty, Empty), Empty));

(* 
例：
文字列にコード化された2分木をstring tree型データに変換する処理

pre-orderによる木の表記法

- 空の木Empty は、空文字列を表す
- Node(a, L, R)
  - L(左部分木) -> S_L
  - R(右部分木) -> S_R
  - a(S_L)(S_R)

これによって得られた文字列表現をpre-order表現と呼ぶ。
*)

(* 

*)